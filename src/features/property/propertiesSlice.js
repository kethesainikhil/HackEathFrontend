import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { addPropertyApi, deletePropertyApi, getAllPropertiesApi, getPropertyApi, getPropertyByIdApi, sendEmailApi, udpateLikesApi, updatePropertyApi } from "./propertiesApi";

const initialState = {
  data:{

  },
  properties:[],
  AllProperties:[],
  propertyDetails:null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const addPropertyAsync = createAsyncThunk(
  "property/addProperty",
  async (data) => {
    const response = await addPropertyApi(data);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const getPropertiesAsync = createAsyncThunk(
  "property/getProperties",
  async (id) => {
    const response = await getPropertyApi(id);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const getPropertiesByIdAsync = createAsyncThunk(
  "property/getPropertiesById",
  async (id) => {
    const response = await getPropertyByIdApi(id);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const getAllPropertiesAsync = createAsyncThunk(
  "property/getAllProperties",
  async () => {
    const response = await getAllPropertiesApi();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const updateLikesAsync = createAsyncThunk(
  "property/updateLikes",
  async (data) => {
    const response = await udpateLikesApi(data);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const updatePropertyAsync = createAsyncThunk(
  "property/updateProperty",
  async (data) => {
    const response = await updatePropertyApi(data);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
  export const deletePropertyAsync = createAsyncThunk(
    "property/deleteProperty",
    async (id) => {
      const response = await deletePropertyApi(id);
      // The value we return becomes the `fulfilled` action payload
      return response;
    }
);
export const sendEmailAsync = createAsyncThunk(
  "property/sendEmail",
  async (data) => {
    const response = await sendEmailApi(data);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const propertySlice = createSlice({
  name: "property",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },

    incrementLikes: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.propertyDetails.likes += 1;
    },
    decrementLikes: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.propertyDetails.likes -= 1;
    },
    filter: (state,action) => {
      state.AllProperties = action.payload
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder

      .addCase(addPropertyAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(addPropertyAsync.fulfilled, (state, action) => {
        state.status = "completed";
        state.data = action.payload
      })

      .addCase(getPropertiesAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getPropertiesAsync.fulfilled, (state, action) => {
        state.status = "completed";
        state.properties = action.payload
      })
      .addCase(getAllPropertiesAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getAllPropertiesAsync.fulfilled, (state, action) => {
        state.status = "completed";
        state.AllProperties = action.payload
      })
      .addCase(getPropertiesByIdAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getPropertiesByIdAsync.fulfilled, (state, action) => {
        state.status = "completed";
        state.propertyDetails = action.payload
      })

  },
});

export const { increment, filter, deleteProperty, decrement, incrementByAmount,incrementLikes , decrementLikes} = propertySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default propertySlice.reducer;
